// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GPRCServiceAPIClient is the client API for GPRCServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPRCServiceAPIClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ShowUser(ctx context.Context, in *ShowUserRequest, opts ...grpc.CallOption) (*ShowUserResponse, error)
	ShowUsers(ctx context.Context, in *ShowUsersRequest, opts ...grpc.CallOption) (*ShowUsersResponse, error)
	RegistUser(ctx context.Context, in *RegistUserRequest, opts ...grpc.CallOption) (*RegistUserResponse, error)
}

type gPRCServiceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGPRCServiceAPIClient(cc grpc.ClientConnInterface) GPRCServiceAPIClient {
	return &gPRCServiceAPIClient{cc}
}

func (c *gPRCServiceAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/server.GPRCServiceAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPRCServiceAPIClient) ShowUser(ctx context.Context, in *ShowUserRequest, opts ...grpc.CallOption) (*ShowUserResponse, error) {
	out := new(ShowUserResponse)
	err := c.cc.Invoke(ctx, "/server.GPRCServiceAPI/ShowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPRCServiceAPIClient) ShowUsers(ctx context.Context, in *ShowUsersRequest, opts ...grpc.CallOption) (*ShowUsersResponse, error) {
	out := new(ShowUsersResponse)
	err := c.cc.Invoke(ctx, "/server.GPRCServiceAPI/ShowUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPRCServiceAPIClient) RegistUser(ctx context.Context, in *RegistUserRequest, opts ...grpc.CallOption) (*RegistUserResponse, error) {
	out := new(RegistUserResponse)
	err := c.cc.Invoke(ctx, "/server.GPRCServiceAPI/RegistUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPRCServiceAPIServer is the server API for GPRCServiceAPI service.
// All implementations must embed UnimplementedGPRCServiceAPIServer
// for forward compatibility
type GPRCServiceAPIServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ShowUser(context.Context, *ShowUserRequest) (*ShowUserResponse, error)
	ShowUsers(context.Context, *ShowUsersRequest) (*ShowUsersResponse, error)
	RegistUser(context.Context, *RegistUserRequest) (*RegistUserResponse, error)
	mustEmbedUnimplementedGPRCServiceAPIServer()
}

// UnimplementedGPRCServiceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGPRCServiceAPIServer struct {
}

func (UnimplementedGPRCServiceAPIServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGPRCServiceAPIServer) ShowUser(context.Context, *ShowUserRequest) (*ShowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUser not implemented")
}
func (UnimplementedGPRCServiceAPIServer) ShowUsers(context.Context, *ShowUsersRequest) (*ShowUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUsers not implemented")
}
func (UnimplementedGPRCServiceAPIServer) RegistUser(context.Context, *RegistUserRequest) (*RegistUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistUser not implemented")
}
func (UnimplementedGPRCServiceAPIServer) mustEmbedUnimplementedGPRCServiceAPIServer() {}

// UnsafeGPRCServiceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPRCServiceAPIServer will
// result in compilation errors.
type UnsafeGPRCServiceAPIServer interface {
	mustEmbedUnimplementedGPRCServiceAPIServer()
}

func RegisterGPRCServiceAPIServer(s grpc.ServiceRegistrar, srv GPRCServiceAPIServer) {
	s.RegisterService(&GPRCServiceAPI_ServiceDesc, srv)
}

func _GPRCServiceAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPRCServiceAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.GPRCServiceAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPRCServiceAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPRCServiceAPI_ShowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPRCServiceAPIServer).ShowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.GPRCServiceAPI/ShowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPRCServiceAPIServer).ShowUser(ctx, req.(*ShowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPRCServiceAPI_ShowUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPRCServiceAPIServer).ShowUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.GPRCServiceAPI/ShowUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPRCServiceAPIServer).ShowUsers(ctx, req.(*ShowUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPRCServiceAPI_RegistUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPRCServiceAPIServer).RegistUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.GPRCServiceAPI/RegistUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPRCServiceAPIServer).RegistUser(ctx, req.(*RegistUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPRCServiceAPI_ServiceDesc is the grpc.ServiceDesc for GPRCServiceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPRCServiceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.GPRCServiceAPI",
	HandlerType: (*GPRCServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GPRCServiceAPI_Ping_Handler,
		},
		{
			MethodName: "ShowUser",
			Handler:    _GPRCServiceAPI_ShowUser_Handler,
		},
		{
			MethodName: "ShowUsers",
			Handler:    _GPRCServiceAPI_ShowUsers_Handler,
		},
		{
			MethodName: "RegistUser",
			Handler:    _GPRCServiceAPI_RegistUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/grpc.proto",
}
